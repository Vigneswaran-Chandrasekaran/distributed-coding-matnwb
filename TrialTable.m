% Function to read trial data and create Trial table
function trials = TrialTable(f_included, f_fb_type, f_fb_time, f_go_cue, ...
            f_trial_intervals, f_rep_num, f_response_choice, ...
            f_response_times, f_visual_left, f_visual_right, ...
            f_visual_times, description, ...
            included_desc, go_cue_desc, visual_stimulus_time_desc, ...
            visual_stimulus_left_desc, visual_stimulus_right_desc, ...
            response_time_desc, response_choice_desc, ...
            feedback_time_desc, feedback_type_desc, ...
            rep_num_desc)
    arguments
        f_included (1, :) string
        f_fb_type (1, :) string
        f_fb_time (1, :) string
        f_go_cue (1, :) string
        f_trial_intervals (1, :) string
        f_rep_num (1, :) string
        f_response_choice (1, :) string
        f_response_times (1, :) string
        f_visual_left (1, :) string
        f_visual_right (1, :) string
        f_visual_times (1, :) string
        description char = 'No description'
        included_desc char = 'No description'
        go_cue_desc char = 'No description'
        visual_stimulus_time_desc char = 'No description'
        visual_stimulus_left_desc char = 'No description'
        visual_stimulus_right_desc char = 'No description'
        response_time_desc char = 'No description'
        response_choice_desc char = 'No description'
        feedback_time_desc char = 'No description'
        feedback_type_desc char = 'No description'
        rep_num_desc char = 'No description'
    end
    %% read data files
    included = readNPY(f_included);
    fb_type = readNPY(f_fb_type);
    fb_type = ceil(fb_type);
    fb_time = readNPY(f_fb_time);
    go_cue = readNPY(f_go_cue);
    trial_intervals = readNPY(f_trial_intervals);
    rep_num = readNPY(f_rep_num);
    response_choice = readNPY(f_response_choice);
    response_times = readNPY(f_response_times);
    visual_left = readNPY(f_visual_left);
    visual_right = readNPY(f_visual_right);
    visual_times = readNPY(f_visual_times);

    start_time = trial_intervals(:, 1);
    stop_time = trial_intervals(:, 2);

    %% add trials
    trials = types.core.TimeIntervals(...
        'colnames', {'start_time', 'stop_time', 'included', 'go_cue'}, ...
        'description', description, ...
        'id', types.hdmf_common.ElementIdentifiers(...
                                    'data', 0:length(included)-1), ...
        'start_time', types.hdmf_common.VectorData('data', ...
               start_time, 'description', 'this is start time'), ...
        'stop_time', types.hdmf_common.VectorData('data', ...
               stop_time, 'description','this is stop time'), ...
        'included', types.hdmf_common.VectorData('data', included(:), ...
                        'description', included_desc), ...
         'go_cue', types.hdmf_common.VectorData('data', go_cue(:), ...
                        'description', go_cue_desc), ...
         'visual_stimulus_time', types.hdmf_common.VectorData('data', visual_times(:), ...
                        'description', visual_stimulus_time_desc), ...
         'visual_stimulus_left_contrast', types.hdmf_common.VectorData(...
                        'data', visual_left(:), ...
                        'description', visual_stimulus_left_desc), ...
         'visual_stimulus_right_contrast', types.hdmf_common.VectorData(...
                        'data', visual_right(:), ...
                        'description', visual_stimulus_right_desc), ...
         'response_time', types.hdmf_common.VectorData(...
                        'data', response_times(:), ...
                        'description', response_time_desc), ...
        'response_choice', types.hdmf_common.VectorData(...
                        'data', response_choice(:), ...
                        'description', response_choice_desc), ...
        'feedback_time', types.hdmf_common.VectorData(...
                        'data', fb_time(:), ...
                        'description', feedback_time_desc), ...
        'feedback_type', types.hdmf_common.VectorData(...
                        'data', fb_type(:), ...
                        'description', feedback_type_desc), ...
        'rep_num', types.hdmf_common.VectorData(...
                        'data', rep_num(:), ...
                        'description', rep_num_desc));
end
