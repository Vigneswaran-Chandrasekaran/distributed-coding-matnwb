% Function to read clusters and spikes data and create Units table
function nwb_file = ClustersSpikes(nwb_file, group_view, ...
                    file_prefix, description, ...
                    electrode_group_description, electrodes_description, ...
                    waveform_mean_description, peakchannel_description, ...
                    waveformduration_description, ...
                    phyannotations_description, clusterdepths_description, ...
                    samplingrate_description, spikeamps_description, ...
                    spikedepths_description)
    arguments
        nwb_file {mustBeA(nwb_file, "NwbFile")}
        group_view {mustBeA(group_view, "types.untyped.ObjectView")}
        file_prefix (1, :) string = ''
        description char = 'Units table'
        electrode_group_description char = 'Electrode groups'
        electrodes_description char = 'Electrodes'
        waveform_mean_description char = 'Waveform mean'
        peakchannel_description char = ['The channel number of ' ...
                                        'the location of the peak']
        waveformduration_description char = ['The trough-to-peak duration of ' ...
                                        'the waveform']
        phyannotations_description char = 'Annotating spikes to neurons'
        clusterdepths_description char = ['The position of the center ' ...
                                  'of mass of the template of the cluster']
        samplingrate_description char = 'sampling rate'
        spikeamps_description char = 'The peak-to-trough amplitude'
        spikedepths_description char = ['The position of the center of mass ' ...
                                        'of the spike on the probe']
    end
    %% read data files
    fname_cluster_probe = strcat(file_prefix, 'clusters.probes.npy');
    fname_cluster_channel = strcat(file_prefix, 'clusters.peakChannel.npy');
    fname_cluster_depths = strcat(file_prefix, 'clusters.depths.npy');
    fname_phy_annotations = strcat(file_prefix, 'clusters._phy_annotation.npy');
    fname_waveform_chans = strcat(file_prefix, 'clusters.templateWaveformChans.npy');
    fname_waveform = strcat(file_prefix, 'clusters.templateWaveforms.npy');
    fname_waveform_duration = strcat(file_prefix, 'clusters.waveformDuration.npy');
    fname_spike_to_clusters = strcat(file_prefix, 'spikes.clusters.npy');
    fname_spike_times = strcat(file_prefix, 'spikes.times.npy');
    fname_spike_amps = strcat(file_prefix, 'spikes.amps.npy');
    fname_spike_depths = strcat(file_prefix, 'spikes.depths.npy');

    %%
    cluster_probe = readNPY(fname_cluster_probe);
    cluster_probe = uint8(cluster_probe(:));
    cluster_channel = readNPY(fname_cluster_channel);
    cluster_depths = readNPY(fname_cluster_depths);
    phy_annotations = readNPY(fname_phy_annotations);
    phy_annotations = phy_annotations(:);
    waveform_chans = readNPY(fname_waveform_chans);
    waveform_chans = uint8(waveform_chans);
    waveform = readNPY(fname_waveform);
    waveform_duration = readNPY(fname_waveform_duration);
    spike_to_clusters = readNPY(fname_spike_to_clusters);
    spike_times = readNPY(fname_spike_times);
    spike_amps = readNPY(fname_spike_amps);
    spike_depths = readNPY(fname_spike_depths);

    %% bin the spikes to clusters
    cluster_info = unique((spike_to_clusters));
    clusters = cell(1, length(cluster_info));

    for i = 1:size(spike_to_clusters, 1)
        s = uint8(spike_to_clusters(i));
        if isempty(clusters{s+1})
            clusters{s+1} = [];
        end
        clusters{s+1}{end+1} = i;
    end

    times = cell(1, size(clusters', 1));
    annotations = cell(1, size(clusters', 1));
    channel = cell(1, size(clusters', 1));
    duration = cell(1, size(clusters', 1));
    amps = cell(1, size(clusters', 1));
    depths = cell(1, size(clusters', 1));

    for i = 1:length(clusters)
        times{i} = spike_times(cell2mat(clusters{i}))';
        annotations{i} = uint8(phy_annotations(i))';
        channel{i} = uint8(cluster_channel(i))';
        duration{i} = uint8(waveform_duration(i))';
        amps{i} = spike_amps(i)';
        depths{i} = spike_depths(i)';
    end

    id = types.hdmf_common.ElementIdentifiers('data', ...
                                            int64(0:length(times)-1));
    columns = {'spike_times', 'phyannotations', 'peakchannel', ...
           'waveformduration', 'clusterdepths', 'samplingrate', ...
           'spikeamps', 'spikedepths'};
    electrodes_object_view = types.untyped.ObjectView( ...
        '/general/extracellular_ephys/electrodes');
    electrodes_group_view = group_view(cluster_probe(:)+1);
    [spike_times_vector, spike_times_index] = util.create_indexed_column( ...
                                        times, '/units/spike_times');
    spike_times_index.description = 'spikes index';

    nwb_file.units = types.core.Units( ...
        'colnames', columns, ...
        'description',  description, ...
        'id', id, ...
        'spike_times', spike_times_vector, ...
        'spike_times_index', spike_times_index, ...
        'electrode_group', types.hdmf_common.VectorData('data', ...
                     electrodes_group_view', ...
                     'description', electrode_group_description), ...
        'electrodes', types.hdmf_common.DynamicTableRegion('table', ...
                     electrodes_object_view, ...
                     'description',  electrodes_description, ...
                     'data', waveform_chans'), ...
        'waveform_mean', types.hdmf_common.VectorData('data', ...
                     permute(waveform, [3, 2, 1]), ...
                     'description', waveform_mean_description), ...
        'peakchannel', types.hdmf_common.DynamicTableRegion('table', ...
                    electrodes_object_view, ...
                    'description', peakchannel_description, ...
                    'data', cell2mat(channel)'), ...
        'waveformduration', types.hdmf_common.VectorData('data', ...
                        cell2mat(duration)', ...
                        'description', waveformduration_description), ...
        'phyannotations', types.hdmf_common.VectorData('data', ...
                cell2mat(annotations)', ...
                'description', phyannotations_description), ...
        'clusterdepths', types.hdmf_common.VectorData('data', ...
                    cluster_depths, ...
                    'description', clusterdepths_description), ...
        'samplingrate', types.hdmf_common.VectorData('data', ...
                        repmat(30000.0, length(cluster_info), 1), ...
                        'description', samplingrate_description), ...
        'spikeamps', types.hdmf_common.VectorData('data', ...
                        cell2mat(amps)', ...
                        'description', spikeamps_description), ...
        'spikedepths', types.hdmf_common.VectorData('data', ...
                        cell2mat(depths)', ...
                        'description',  spikedepths_description));
end
