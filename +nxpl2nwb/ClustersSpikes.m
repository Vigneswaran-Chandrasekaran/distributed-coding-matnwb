% Function to read clusters and spikes data and create Units table
function nwb_file = ClustersSpikes(nwb_file, group_view, ...
                    cluster_probe, cluster_channel, cluster_depths, ...
                    phy_annotations, waveform_chans, waveform, ...
                    waveform_duration, spike_to_clusters, ...
                    spike_times, spike_amps, spike_depths, ...
                    description, electrode_group_desc, electrodes_desc, ...
                    waveform_mean_desc, peakchannel_desc, waveformduration_desc, ...
                    phyannotations_desc, clusterdepths_desc, ...
                    samplingrate_desc, spikeamps_desc, spikedepths_desc)
    arguments
        nwb_file {mustBeA(nwb_file, "NwbFile")}
        group_view {mustBeA(group_view, "types.untyped.ObjectView")}
        cluster_probe (1, :) string
        cluster_channel (1, :) string
        cluster_depths (1, :) string
        phy_annotations (1, :) string
        waveform_chans (1, :) string
        waveform (1, :) string
        waveform_duration (1, :) string
        spike_to_clusters (1, :) string
        spike_times (1, :) string
        spike_amps (1, :) string
        spike_depths (1, :) string
        description char = 'No description'
        electrode_group_desc char = 'No description'
        electrodes_desc char = 'No description'
        waveform_mean_desc char = 'No description'
        peakchannel_desc char = 'No description'
        waveformduration_desc char = 'No description'
        phyannotations_desc char = 'No description'
        clusterdepths_desc char = 'No description'
        samplingrate_desc char = 'No description'
        spikeamps_desc char = 'No description'
        spikedepths_desc char = 'No description'
    end

    %% read data files
    cluster_probe = readNPY(cluster_probe);
    cluster_probe = ceil(cluster_probe(:));
    cluster_channel = readNPY(cluster_channel);
    cluster_depths = readNPY(cluster_depths);
    phy_annotations = readNPY(phy_annotations);
    phy_annotations = phy_annotations(:);
    waveform_chans = readNPY(waveform_chans);
    waveform_chans = ceil(waveform_chans);
    waveform = readNPY(waveform);
    waveform_duration = readNPY(waveform_duration);
    spike_to_clusters = readNPY(spike_to_clusters);
    spike_times = readNPY(spike_times);
    spike_amps = readNPY(spike_amps);
    spike_depths = readNPY(spike_depths);

    %% bin the spikes to clusters
    cluster_info = unique((spike_to_clusters));
    clusters = cell(1, length(cluster_info));

    for i = 1:size(spike_to_clusters, 1)
        s = ceil(spike_to_clusters(i));
        if isempty(clusters{s+1})
            clusters{s+1} = [];
        end
        clusters{s+1}{end+1} = i;
    end

    %% get other data with cluster specific
    times = cell(1, size(clusters', 1));
    annotations = cell(1, size(clusters', 1));
    channel = cell(1, size(clusters', 1));
    duration = cell(1, size(clusters', 1));
    amps = cell(1, size(clusters', 1));
    depths = cell(1, size(clusters', 1));

    for i = 1:length(clusters)
        times{i} = spike_times(cell2mat(clusters{i}))';
        annotations{i} = ceil(phy_annotations(i))';
        channel{i} = ceil(cluster_channel(i))';
        duration{i} = ceil(waveform_duration(i))';
        amps{i} = spike_amps(i)';
        depths{i} = spike_depths(i)';
    end

    %% Create Units table and entities
    id = types.hdmf_common.ElementIdentifiers('data', int64(0:length(times)-1));
    columns = {'spike_times', 'phyannotations', 'peakchannel', ...
           'waveformduration', 'clusterdepths', 'samplingrate', ...
           'spikeamps', 'spikedepths'};
    electrodes_object_view = types.untyped.ObjectView( ...
        '/general/extracellular_ephys/electrodes');

    [spike_times_vector, spike_times_index] = util.create_indexed_column( ...
                                        times, '/units/spike_times');
    spike_times_index.description = 'spikes index';

    nwb_file.units = types.core.Units( ...
        'colnames', columns, ...
        'description', description, ...
        'id', id, ...
        'spike_times', spike_times_vector, ...
        'spike_times_index', spike_times_index, ...
        'electrode_group', types.hdmf_common.VectorData('data', group_view', ...
                    'description', electrode_group_desc), ...
        'electrodes', types.hdmf_common.DynamicTableRegion('table', electrodes_object_view, ...
                     'description', electrodes_desc, ...
                     'data', waveform_chans), ...
        'waveform_mean', types.hdmf_common.VectorData('data', waveform, ...
                        'description', waveform_mean_desc), ...
        'peakchannel', types.hdmf_common.VectorData('data', cell2mat(channel), ...
                        'description', peakchannel_desc), ...
        'waveformduration', types.hdmf_common.VectorData('data', cell2mat(duration), ...
                        'description', waveformduration_desc), ...
        'phyannotations', types.hdmf_common.VectorData('data', cell2mat(annotations), ...
                'description', phyannotations_desc), ...
        'clusterdepths', types.hdmf_common.VectorData('data', cluster_depths', ...
                    'description', clusterdepths_desc), ...
        'samplingrate', types.hdmf_common.VectorData('data', ...
                        repmat(30000.0, 1, length(cluster_info)), ...
                        'description', samplingrate_desc), ...
        'spikeamps', types.hdmf_common.VectorData('data', cell2mat(amps), ...
                        'description', spikeamps_desc), ...
        'spikedepths', types.hdmf_common.VectorData('data', cell2mat(depths), ...
                        'description', spikedepths_desc));

end
