% Function to convert trial data and create TrialTable
function trials = TrialTable(file_prefix, trialtable_description, ...
            included_description, go_cue_description, ...
            visual_stimulustime_description, ...
            visual_stimulusleft_description, visual_stimulusright_description, ...
            response_time_description, response_choice_description, ...
            feedback_time_description, feedback_type_description, ...
            rep_num_description)
    arguments
        file_prefix (1, :) string = ''
        trialtable_description char = 'trial table for behavioral trials'
        included_description = 'inclusion criteria'
        go_cue_description = 'auditory tone cue'
        visual_stimulustime_description = 'Relative time of visual stimulus'
        visual_stimulusleft_description = 'Proportion contrast'
        visual_stimulusright_description = 'Proportion constrast'
        response_time_description = 'Relative time of response'
        response_choice_description = 'response registered at the end of the trial'
        feedback_time_description = 'Relative time of feedback'
        feedback_type_description = 'Feedback type (reward/punishment)'
        rep_num_description = 'trials repetition'
    end
    %% read data files
    fname_included = strcat(file_prefix, 'trials.included.npy');
    fname_feedbacktype = strcat(file_prefix, 'trials.feedbackType.npy');
    fname_feedbacktime = strcat(file_prefix, 'trials.feedback_times.npy');
    fname_gocue = strcat(file_prefix, 'trials.goCue_times.npy');
    fname_trial_intervals = strcat(file_prefix, 'trials.intervals.npy');
    fname_rep_num = strcat(file_prefix, 'trials.repNum.npy');
    fname_response_choice =strcat(file_prefix, 'trials.response_choice.npy');
    fname_response_times =strcat(file_prefix, 'trials.response_times.npy');
    fname_visual_left = strcat(file_prefix, 'trials.visualStim_contrastLeft.npy');
    fname_visual_right = strcat(file_prefix, 'trials.visualStim_contrastRight.npy');
    fname_visual_stimulus_times = strcat(file_prefix, 'trials.visualStim_times.npy');

    included = readNPY(fname_included);
    feedbacktype = readNPY(fname_feedbacktype);
    feedbacktype = uint8(feedbacktype);
    feedbacktime = readNPY(fname_feedbacktime);
    go_cue = readNPY(fname_gocue);
    trial_intervals = readNPY(fname_trial_intervals);
    rep_num = readNPY(fname_rep_num);
    rep_num = uint8(rep_num);
    response_choice = readNPY(fname_response_choice);
    response_choice = int8(response_choice);
    response_times = readNPY(fname_response_times);
    visual_left = readNPY(fname_visual_left);
    visual_right = readNPY(fname_visual_right);
    visual_stimulus_times = readNPY(fname_visual_stimulus_times);
    %%
    start_time = trial_intervals(:, 1);
    stop_time = trial_intervals(:, 2);
    %% add trials
    trials = types.core.TimeIntervals(...
        'colnames', {'start_time', 'stop_time', 'included', 'go_cue_time', ...
                     'visual_stimulus_time', 'visual_stimulus_left_contrast', ...
                     'visual_stimulus_right_contrast', 'response_time', ...
                     'response_choice', 'feedback_time', 'feedback_type', ...
                     'rep_num'}, ...
        'description', trialtable_description, ...
        'id', types.hdmf_common.ElementIdentifiers(...
                                    'data', 0:length(included)-1), ...
        'start_time', types.hdmf_common.VectorData('data', ...
               start_time, 'description', 'this is start time'), ...
        'stop_time', types.hdmf_common.VectorData('data', ...
               stop_time, 'description','this is stop time'), ...
        'included', types.hdmf_common.VectorData('data', included(:), ...
                        'description', included_description), ...
        'go_cue_time', types.hdmf_common.VectorData('data', go_cue(:), ...
                        'description', go_cue_description), ...
        'visual_stimulus_time', types.hdmf_common.VectorData('data', ...
                        visual_stimulus_times(:), ...
                        'description', visual_stimulustime_description), ...
        'visual_stimulus_left_contrast', types.hdmf_common.VectorData(...
                        'data', visual_left(:), ...
                        'description', visual_stimulusleft_description), ...
        'visual_stimulus_right_contrast', types.hdmf_common.VectorData(...
                        'data', visual_right(:), ...
                        'description', visual_stimulusright_description), ...
        'response_time', types.hdmf_common.VectorData(...
                        'data', response_times(:), ...
                        'description', response_time_description), ...
        'response_choice', types.hdmf_common.VectorData(...
                        'data', int8(response_choice(:)), ...
                        'description', response_choice_description), ...
        'feedback_time', types.hdmf_common.VectorData(...
                        'data', feedbacktime(:), ...
                        'description', feedback_time_description), ...
        'feedback_type', types.hdmf_common.VectorData(...
                        'data', feedbacktype(:), ...
                        'description', feedback_type_description), ...
        'rep_num', types.hdmf_common.VectorData(...
                        'data', uint8(rep_num(:)), ...
                        'description', rep_num_description)...
    );
end
