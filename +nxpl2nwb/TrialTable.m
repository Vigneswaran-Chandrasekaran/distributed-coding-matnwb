% Function to convert trial data and create TrialTable
function trials = TrialTable(file_prefix, descriptions)
    arguments
        file_prefix (1, :) string = ''
    end
    arguments (Repeating)
        descriptions char
    end
    %% read data files
    fname_included = strcat(file_prefix, 'trials.included.npy');
    fname_feedbacktype = strcat(file_prefix, 'trials.feedbackType.npy');
    fname_feedbacktime = strcat(file_prefix, 'trials.feedback_times.npy');
    fname_gocue = strcat(file_prefix, 'trials.goCue_times.npy');
    fname_trial_intervals = strcat(file_prefix, 'trials.intervals.npy');
    fname_rep_num = strcat(file_prefix, 'trials.repNum.npy');
    fname_response_choice =strcat(file_prefix, 'trials.response_choice.npy');
    fname_response_times =strcat(file_prefix, 'trials.response_times.npy');
    fname_visual_left = strcat(file_prefix, 'trials.visualStim_contrastLeft.npy');
    fname_visual_right = strcat(file_prefix, 'trials.visualStim_contrastRight.npy');
    fname_visual_stimulus_times = strcat(file_prefix, 'trials.visualStim_times.npy');

    included = readNPY(fname_included);
    feedbacktype = readNPY(fname_feedbacktype);
    feedbacktype = uint8(feedbacktype);
    feedbacktime = readNPY(fname_feedbacktime);
    go_cue = readNPY(fname_gocue);
    trial_intervals = readNPY(fname_trial_intervals);
    rep_num = readNPY(fname_rep_num);
    rep_num = uint8(rep_num);
    response_choice = readNPY(fname_response_choice);
    response_choice = uint8(response_choice);
    response_times = readNPY(fname_response_times);
    visual_left = readNPY(fname_visual_left);
    visual_right = readNPY(fname_visual_right);
    visual_stimulus_times = readNPY(fname_visual_stimulus_times);
    %%
    start_time = trial_intervals(:, 1);
    stop_time = trial_intervals(:, 2);
    %% add trials
    trials = types.core.TimeIntervals(...
        'colnames', {'start_time', 'stop_time', 'included', 'go_cue'}, ...
        'description', descriptions(1), ...
        'id', types.hdmf_common.ElementIdentifiers(...
                                    'data', 0:length(included)-1), ...
        'start_time', types.hdmf_common.VectorData('data', ...
               start_time, 'description', 'this is start time'), ...
        'stop_time', types.hdmf_common.VectorData('data', ...
               stop_time, 'description','this is stop time'), ...
        'included', types.hdmf_common.VectorData('data', included(:), ...
                        'description', cell2mat(descriptions(2))), ...
        'go_cue', types.hdmf_common.VectorData('data', go_cue(:), ...
                        'description', cell2mat(descriptions(3))), ...
        'visual_stimulus_time', types.hdmf_common.VectorData('data', ...
                        visual_stimulus_times(:), ...
                        'description', cell2mat(descriptions(4))), ...
        'visual_stimulus_left_contrast', types.hdmf_common.VectorData(...
                        'data', visual_left(:), ...
                        'description', cell2mat(descriptions(5))), ...
        'visual_stimulus_right_contrast', types.hdmf_common.VectorData(...
                        'data', visual_right(:), ...
                        'description', cell2mat(descriptions(6))), ...
        'response_time', types.hdmf_common.VectorData(...
                        'data', response_times(:), ...
                        'description', cell2mat(descriptions(7))), ...
        'response_choice', types.hdmf_common.VectorData(...
                        'data', response_choice(:), ...
                        'description', cell2mat(descriptions(8))), ...
        'feedback_time', types.hdmf_common.VectorData(...
                        'data', feedbacktime(:), ...
                        'description', cell2mat(descriptions(9))), ...
        'feedback_type', types.hdmf_common.VectorData(...
                        'data', feedbacktype(:), ...
                        'description', cell2mat(descriptions(10))), ...
        'rep_num', types.hdmf_common.VectorData(...
                        'data', rep_num(:), ...
                        'description', cell2mat(descriptions(11)))...
    );
end
