% Function to read passive stimulus data and convert to corresponding
% TimeSeries objects
function [passive_beep_timeseries, passive_clicks_timseries, ...
          passive_left, passive_right, passive_white] = PassiveStim(...
                      file_prefix, ...
                      passive_beeps_dataunit, passive_beeps_description, ...
                      passive_clicks_dataunit, passive_clicks_description, ...
                      passivevisual_left_data_unit, passivevisual_left_description, ...
                      passivevisual_right_data_unit, passivevisual_right_description, ...
                      passive_incorrect_clicks_dataunit, ...
                      passive_incorrect_clicks_description)

    arguments
        file_prefix (1, :) string = ''
        passive_beeps_dataunit char = 'Unknown'
        passive_beeps_description char = 'Auditory sound as same as in trial'
        passive_clicks_dataunit char = 'Unknown'
        passive_clicks_description char = 'Auditory sound but no reward'
        passivevisual_left_data_unit char = 'Unknown'
        passivevisual_left_description char = ['Gratings as similar in'... 
                                               'discriminatory task']
        passivevisual_right_data_unit char = 'Unknown'
        passivevisual_right_description char = ['Gratings as similar in' ...
                                                'discriminatory task']
        passive_incorrect_clicks_dataunit char = 'Unknown'
        passive_incorrect_clicks_description char = [...
                                            'The sound that accompanies '...
                                            'an incorrect response']
    end
    %% add passive beeps
    fname_passive_beeps = strcat(file_prefix, 'passiveBeeps.times.npy');
    passive_beeps = readNPY(fname_passive_beeps);
    passive_beeps_data = uint8(ones(length(passive_beeps), 1));
    passive_beep_timeseries = types.core.TimeSeries(...
                                'timestamps', passive_beeps', ...
                                'data', passive_beeps_data, ...
                                'data_unit', passive_beeps_dataunit, ...
                                'description', passive_beeps_description);

    %% passive valve clicks
    fname_passive_clicks = strcat(file_prefix, 'passiveValveClick.times.npy');
    passive_clicks = readNPY(fname_passive_clicks);
    passive_clicks_data = uint8(ones(length(passive_clicks), 1));
    passive_clicks_timseries = types.core.TimeSeries(...
                                'timestamps', passive_clicks', ...
                                'data', passive_clicks_data, ...
                                'data_unit', passive_clicks_dataunit, ...
                                'description', passive_clicks_description);

    %% passive visual times
    fname_passivevisual_times = strcat(file_prefix, 'passiveVisual.times.npy');
    fname_passivevisual_left = strcat(file_prefix, 'passiveVisual.contrastLeft.npy');
    fname_passivevisual_right = strcat(file_prefix, 'passiveVisual.contrastRight.npy');
    passivevisual_times = readNPY(fname_passivevisual_times);
    passivevisual_left = readNPY(fname_passivevisual_left);
    passivevisual_right = readNPY(fname_passivevisual_right);

    passive_left = types.core.TimeSeries(...
                            'timestamps', passivevisual_times', ...
                            'data', passivevisual_left', ...
                            'data_unit', passivevisual_left_data_unit, ...
                            'description', passivevisual_left_description);

     passive_right = types.core.TimeSeries(...
                                'timestamps', passivevisual_times', ...
                                'data', passivevisual_right', ...
                                'data_unit', passivevisual_right_data_unit, ...
                                'description', passivevisual_right_description);

    %% passive incorrect valve clicks
    fname_passive_noise = strcat(file_prefix, 'passiveWhiteNoise.times.npy');
    passive_noise = readNPY(fname_passive_noise);
    passive_noise_data = uint8(ones(length(passive_noise), 1));
    passive_white = types.core.TimeSeries(...
                'timestamps', passive_noise', ...
                'data', passive_noise_data, ...
                'data_unit', passive_incorrect_clicks_dataunit, ...
                'description', passive_incorrect_clicks_description);
end
